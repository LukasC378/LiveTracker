using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.Http;
using System.Security.Claims;
using LiveTrackerSessionAPI.Hubs;
using LiveTrackerSessionAPI.Repository;
using LiveTrackerSessionAPI.Services;
using LiveTrackerSessionAPI.Services.Interfaces;
using Moq;
using SessionAPICommonModels;
using SessionAPICommonModels.Dtos;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;

namespace UnitTests;

public class Tests
{
    private const string SpaGeoJson = "{\r\n\"type\": \"FeatureCollection\",\r\n\"name\": \"be-1925\",\r\n\"bbox\": [ 5.959602, 50.427678, 5.977560, 50.446217 ], \r\n\"features\": [\r\n{ \"type\": \"Feature\", \"properties\": { \"id\": \"be-1925\", \"Location\": \"Spa Francorchamps\", \"Name\": \"Circuit de Spa-Francorchamps\", \"opened\": 1925, \"firstgp\": 1950, \"length\": 7004, \"altitude\": 413 }, \"bbox\": [ 5.959602, 50.427678, 5.97756, 50.446217 ], \"geometry\": { \"type\": \"LineString\", \"coordinates\": [ [ 5.96502, 50.444251 ], [ 5.963419, 50.446033 ], [ 5.963402, 50.446113 ], [ 5.963473, 50.446184 ], [ 5.963621, 50.446217 ], [ 5.963786, 50.446188 ], [ 5.964313, 50.446019 ], [ 5.965592, 50.445628 ], [ 5.966207, 50.445387 ], [ 5.966847, 50.445085 ], [ 5.967421, 50.444779 ], [ 5.967876, 50.444463 ], [ 5.970321, 50.442606 ], [ 5.970493, 50.442502 ], [ 5.970788, 50.442385 ], [ 5.971315, 50.442168 ], [ 5.971546, 50.442022 ], [ 5.971741, 50.441824 ], [ 5.971866, 50.441644 ], [ 5.971949, 50.441442 ], [ 5.97202, 50.441069 ], [ 5.972061, 50.440937 ], [ 5.972132, 50.440815 ], [ 5.972268, 50.440655 ], [ 5.973476, 50.439424 ], [ 5.974245, 50.438642 ], [ 5.974458, 50.43835 ], [ 5.974594, 50.438133 ], [ 5.974754, 50.437784 ], [ 5.975719, 50.435639 ], [ 5.977199, 50.432382 ], [ 5.977542, 50.431599 ], [ 5.97756, 50.431472 ], [ 5.977524, 50.431331 ], [ 5.977406, 50.431218 ], [ 5.977234, 50.431123 ], [ 5.977015, 50.431048 ], [ 5.976885, 50.430968 ], [ 5.976796, 50.430874 ], [ 5.976725, 50.430732 ], [ 5.976737, 50.430591 ], [ 5.977033, 50.429747 ], [ 5.977027, 50.429601 ], [ 5.97698, 50.429469 ], [ 5.97682, 50.429323 ], [ 5.97663, 50.429224 ], [ 5.973257, 50.427739 ], [ 5.973044, 50.427682 ], [ 5.972831, 50.427678 ], [ 5.972606, 50.42772 ], [ 5.972422, 50.427805 ], [ 5.972292, 50.427927 ], [ 5.972239, 50.42805 ], [ 5.972227, 50.428182 ], [ 5.972292, 50.428305 ], [ 5.97241, 50.428432 ], [ 5.972582, 50.428521 ], [ 5.974056, 50.429101 ], [ 5.974216, 50.429205 ], [ 5.974304, 50.429309 ], [ 5.97434, 50.429431 ], [ 5.974322, 50.429582 ], [ 5.973712, 50.430723 ], [ 5.973523, 50.431189 ], [ 5.973091, 50.432627 ], [ 5.972878, 50.433452 ], [ 5.972831, 50.433593 ], [ 5.972724, 50.433744 ], [ 5.972582, 50.433867 ], [ 5.972369, 50.433999 ], [ 5.972132, 50.434098 ], [ 5.971872, 50.434164 ], [ 5.971599, 50.434192 ], [ 5.970717, 50.43423 ], [ 5.97038, 50.434206 ], [ 5.970072, 50.43415 ], [ 5.969759, 50.434065 ], [ 5.969504, 50.433956 ], [ 5.969208, 50.433782 ], [ 5.969019, 50.433608 ], [ 5.968812, 50.433358 ], [ 5.967977, 50.432028 ], [ 5.967231, 50.430845 ], [ 5.967071, 50.430661 ], [ 5.966882, 50.430534 ], [ 5.966622, 50.43044 ], [ 5.966361, 50.430393 ], [ 5.966119, 50.430388 ], [ 5.965876, 50.430421 ], [ 5.965669, 50.430482 ], [ 5.965325, 50.430624 ], [ 5.9651, 50.430685 ], [ 5.964828, 50.430713 ], [ 5.964556, 50.430694 ], [ 5.964307, 50.430643 ], [ 5.964094, 50.430548 ], [ 5.963958, 50.43044 ], [ 5.963792, 50.430294 ], [ 5.962425, 50.428927 ], [ 5.962289, 50.428847 ], [ 5.962123, 50.42879 ], [ 5.961922, 50.428762 ], [ 5.961697, 50.428771 ], [ 5.961502, 50.428828 ], [ 5.960578, 50.429257 ], [ 5.960034, 50.429511 ], [ 5.959898, 50.429624 ], [ 5.959756, 50.429761 ], [ 5.959673, 50.429893 ], [ 5.959614, 50.430049 ], [ 5.959602, 50.430209 ], [ 5.959643, 50.430402 ], [ 5.959738, 50.430567 ], [ 5.959862, 50.430779 ], [ 5.960046, 50.4311 ], [ 5.960365, 50.431463 ], [ 5.960715, 50.431779 ], [ 5.961247, 50.43216 ], [ 5.962135, 50.432712 ], [ 5.962656, 50.432971 ], [ 5.9631, 50.433136 ], [ 5.965385, 50.433895 ], [ 5.965716, 50.434027 ], [ 5.96603, 50.434183 ], [ 5.96632, 50.434357 ], [ 5.966568, 50.434546 ], [ 5.966799, 50.434744 ], [ 5.967107, 50.435106 ], [ 5.967356, 50.435455 ], [ 5.967924, 50.436261 ], [ 5.968024, 50.436436 ], [ 5.968084, 50.436624 ], [ 5.968095, 50.43686 ], [ 5.968036, 50.437072 ], [ 5.967699, 50.437624 ], [ 5.967332, 50.438232 ], [ 5.966888, 50.438991 ], [ 5.966775, 50.439273 ], [ 5.966669, 50.439608 ], [ 5.966604, 50.439919 ], [ 5.966562, 50.440183 ], [ 5.966432, 50.441404 ], [ 5.966456, 50.441484 ], [ 5.966533, 50.441541 ], [ 5.966651, 50.44156 ], [ 5.966852, 50.441541 ], [ 5.96706, 50.441541 ], [ 5.967202, 50.44156 ], [ 5.967296, 50.441626 ], [ 5.96732, 50.441701 ], [ 5.967261, 50.4418 ], [ 5.966533, 50.442559 ], [ 5.96502, 50.444251 ] ] } }\r\n]\r\n}";
    private const string BaKeGeoJson =
        "{\r\n  \"type\": \"FeatureCollection\",\r\n  \"features\": [\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"properties\": {},\r\n      \"geometry\": {\r\n        \"coordinates\": [\r\n          [\r\n            17.104641838716873,\r\n            48.13181888769941\r\n          ],\r\n          [\r\n            17.13184717176395,\r\n            48.13071077807251\r\n          ],\r\n          [\r\n            17.1520859707272,\r\n            48.14185618721049\r\n          ],\r\n          [\r\n            17.1744327100657,\r\n            48.14259470533824\r\n          ],\r\n          [\r\n            17.180194708840133,\r\n            48.14724613428871\r\n          ],\r\n          [\r\n            17.18626295974849,\r\n            48.17376317070753\r\n          ],\r\n          [\r\n            17.21536863330195,\r\n            48.19270413185046\r\n          ],\r\n          [\r\n            17.250711905763325,\r\n            48.21048638163592\r\n          ],\r\n          [\r\n            17.274941998132277,\r\n            48.21464022670639\r\n          ],\r\n          [\r\n            17.317884982003022,\r\n            48.214639489239715\r\n          ],\r\n          [\r\n            17.342433768545305,\r\n            48.22120966034535\r\n          ],\r\n          [\r\n            17.369759930122342,\r\n            48.23852276446391\r\n          ],\r\n          [\r\n            17.387116464256565,\r\n            48.24405700611999\r\n          ],\r\n          [\r\n            17.427769367894456,\r\n            48.249135922279095\r\n          ],\r\n          [\r\n            17.455352029840725,\r\n            48.26442256271167\r\n          ],\r\n          [\r\n            17.4792360938703,\r\n            48.28428480322532\r\n          ],\r\n          [\r\n            17.505242657629168,\r\n            48.296048159923345\r\n          ],\r\n          [\r\n            17.539255688963436,\r\n            48.30342998715753\r\n          ],\r\n          [\r\n            17.59532895056472,\r\n            48.31899535161503\r\n          ],\r\n          [\r\n            17.631714851179197,\r\n            48.33811748924472\r\n          ],\r\n          [\r\n            17.666039324821753,\r\n            48.3558523933975\r\n          ],\r\n          [\r\n            17.716683165611983,\r\n            48.36874617123442\r\n          ],\r\n          [\r\n            17.737130828933743,\r\n            48.38325918020652\r\n          ],\r\n          [\r\n            17.74718409734868,\r\n            48.400293839098566\r\n          ],\r\n          [\r\n            17.748220776680228,\r\n            48.41433039202698\r\n          ],\r\n          [\r\n            17.741629905159556,\r\n            48.43433974186647\r\n          ],\r\n          [\r\n            17.73781288438329,\r\n            48.459164321093\r\n          ],\r\n          [\r\n            17.749940037910477,\r\n            48.484210262808745\r\n          ],\r\n          [\r\n            17.776270387596526,\r\n            48.51956632308921\r\n          ],\r\n          [\r\n            17.7885701084779,\r\n            48.55145496497684\r\n          ],\r\n          [\r\n            17.789608117613227,\r\n            48.58401406471742\r\n          ],\r\n          [\r\n            17.793415163887374,\r\n            48.602571729652226\r\n          ],\r\n          [\r\n            17.807271658335225,\r\n            48.62982728118095\r\n          ],\r\n          [\r\n            17.819047835441438,\r\n            48.643332348207906\r\n          ],\r\n          [\r\n            17.83463212354806,\r\n            48.64951161518567\r\n          ],\r\n          [\r\n            17.85471914189648,\r\n            48.65065563308545\r\n          ],\r\n          [\r\n            17.86751612239206,\r\n            48.6607213726582\r\n          ],\r\n          [\r\n            17.872652133907422,\r\n            48.673283946456934\r\n          ],\r\n          [\r\n            17.873210233866814,\r\n            48.70129738763302\r\n          ],\r\n          [\r\n            17.874612947317928,\r\n            48.72162471849211\r\n          ],\r\n          [\r\n            17.86802685155712,\r\n            48.733970376010376\r\n          ],\r\n          [\r\n            17.86005520163701,\r\n            48.74174133709016\r\n          ],\r\n          [\r\n            17.86178650792624,\r\n            48.754079017727804\r\n          ],\r\n          [\r\n            17.876332267705266,\r\n            48.77074569169983\r\n          ],\r\n          [\r\n            17.879093185364013,\r\n            48.77948132064705\r\n          ],\r\n          [\r\n            17.888805803623598,\r\n            48.79183651241851\r\n          ],\r\n          [\r\n            17.893301263595617,\r\n            48.79938879432427\r\n          ],\r\n          [\r\n            17.904773272839776,\r\n            48.806004983578106\r\n          ],\r\n          [\r\n            17.90755257843918,\r\n            48.81811774192332\r\n          ],\r\n          [\r\n            17.945026830928498,\r\n            48.84598636908987\r\n          ],\r\n          [\r\n            17.957730031837315,\r\n            48.85997118990713\r\n          ],\r\n          [\r\n            17.978411917470197,\r\n            48.87707615764057\r\n          ],\r\n          [\r\n            17.982214269083585,\r\n            48.883790356308054\r\n          ],\r\n          [\r\n            17.983491156897287,\r\n            48.89879665217086\r\n          ],\r\n          [\r\n            17.998350419734322,\r\n            48.90845578995038\r\n          ],\r\n          [\r\n            18.03259571385476,\r\n            48.913754095159874\r\n          ],\r\n          [\r\n            18.060370495181957,\r\n            48.91337169267072\r\n          ],\r\n          [\r\n            18.070964827656923,\r\n            48.920699490152884\r\n          ],\r\n          [\r\n            18.08440787917857,\r\n            48.92711838831775\r\n          ],\r\n          [\r\n            18.097664779562763,\r\n            48.94300193815914\r\n          ],\r\n          [\r\n            18.139666890461115,\r\n            48.96413888042585\r\n          ],\r\n          [\r\n            18.221455451351574,\r\n            48.99996472332961\r\n          ],\r\n          [\r\n            18.239300315285874,\r\n            49.0105172455786\r\n          ],\r\n          [\r\n            18.25922937214918,\r\n            49.021069218837994\r\n          ],\r\n          [\r\n            18.273418590780807,\r\n            49.037471092131284\r\n          ],\r\n          [\r\n            18.283198251835614,\r\n            49.045727047307\r\n          ],\r\n          [\r\n            18.308610451589516,\r\n            49.04689649874072\r\n          ],\r\n          [\r\n            18.325115263798608,\r\n            49.05329455743495\r\n          ],\r\n          [\r\n            18.343558492073186,\r\n            49.06383318205397\r\n          ],\r\n          [\r\n            18.380944477866933,\r\n            49.0633629097282\r\n          ],\r\n          [\r\n            18.39542718396254,\r\n            49.06885782513842\r\n          ],\r\n          [\r\n            18.415822397057582,\r\n            49.07591970286501\r\n          ],\r\n          [\r\n            18.420275559394952,\r\n            49.087962284488185\r\n          ],\r\n          [\r\n            18.416134315126016,\r\n            49.1004472465182\r\n          ],\r\n          [\r\n            18.416104730807405,\r\n            49.107934482583346\r\n          ],\r\n          [\r\n            18.435206546490576,\r\n            49.11502185622865\r\n          ],\r\n          [\r\n            18.464042966107883,\r\n            49.13981234420439\r\n          ],\r\n          [\r\n            18.46225024335365,\r\n            49.152319966896044\r\n          ],\r\n          [\r\n            18.47897328883974,\r\n            49.16390803424957\r\n          ],\r\n          [\r\n            18.486540473553845,\r\n            49.18047520788673\r\n          ],\r\n          [\r\n            18.508720677605737,\r\n            49.187273559788\r\n          ],\r\n          [\r\n            18.528267685199125,\r\n            49.20814665807569\r\n          ],\r\n          [\r\n            18.5526774393484,\r\n            49.21204366716583\r\n          ],\r\n          [\r\n            18.577076546928282,\r\n            49.21798084665477\r\n          ],\r\n          [\r\n            18.617670654827663,\r\n            49.22778317248313\r\n          ],\r\n          [\r\n            18.632484017311754,\r\n            49.22636596212121\r\n          ],\r\n          [\r\n            18.6459577938721,\r\n            49.220738964167055\r\n          ],\r\n          [\r\n            18.662248874493088,\r\n            49.21985371281065\r\n          ],\r\n          [\r\n            18.666465287702238,\r\n            49.21393004200996\r\n          ],\r\n          [\r\n            18.666131319676282,\r\n            49.20506069838626\r\n          ],\r\n          [\r\n            18.678425546579916,\r\n            49.19885401991769\r\n          ],\r\n          [\r\n            18.68857502322919,\r\n            49.19586895603513\r\n          ],\r\n          [\r\n            18.701117430825917,\r\n            49.18881060075398\r\n          ],\r\n          [\r\n            18.71896719070793,\r\n            49.18718027787415\r\n          ],\r\n          [\r\n            18.727629418929354,\r\n            49.17763727866023\r\n          ],\r\n          [\r\n            18.737396246743714,\r\n            49.179682005112085\r\n          ],\r\n          [\r\n            18.898520111486306,\r\n            49.13237682921968\r\n          ],\r\n          [\r\n            18.92313495251514,\r\n            49.12246768197991\r\n          ],\r\n          [\r\n            18.94014310498443,\r\n            49.11883211633955\r\n          ],\r\n          [\r\n            18.952412242801273,\r\n            49.10946411039771\r\n          ],\r\n          [\r\n            18.973644672726408,\r\n            49.1087864411038\r\n          ],\r\n          [\r\n            18.98998641752263,\r\n            49.10354854985485\r\n          ],\r\n          [\r\n            19.009463409247473,\r\n            49.10332687470242\r\n          ],\r\n          [\r\n            19.030618056235653,\r\n            49.099247032020656\r\n          ],\r\n          [\r\n            19.053280318400084,\r\n            49.10721203202084\r\n          ],\r\n          [\r\n            19.06301605507346,\r\n            49.11564323202117\r\n          ],\r\n          [\r\n            19.070547070693976,\r\n            49.13203092173171\r\n          ],\r\n          [\r\n            19.082303208367193,\r\n            49.1361177151806\r\n          ],\r\n          [\r\n            19.091924315257188,\r\n            49.145874217549164\r\n          ],\r\n          [\r\n            19.095999610159566,\r\n            49.15207328291123\r\n          ],\r\n          [\r\n            19.101411304286188,\r\n            49.150725948113404\r\n          ],\r\n          [\r\n            19.10364483014021,\r\n            49.14538552596093\r\n          ],\r\n          [\r\n            19.107190339593444,\r\n            49.145865625501955\r\n          ],\r\n          [\r\n            19.10683818616579,\r\n            49.15129834654164\r\n          ],\r\n          [\r\n            19.11218332293427,\r\n            49.155552388354494\r\n          ],\r\n          [\r\n            19.119033066486594,\r\n            49.155558962080846\r\n          ],\r\n          [\r\n            19.129022446717414,\r\n            49.150585527452904\r\n          ],\r\n          [\r\n            19.13510013378243,\r\n            49.149728692477936\r\n          ],\r\n          [\r\n            19.138933058623365,\r\n            49.15268698592351\r\n          ],\r\n          [\r\n            19.16430212290814,\r\n            49.14635726847018\r\n          ],\r\n          [\r\n            19.17071378846981,\r\n            49.14235010786834\r\n          ],\r\n          [\r\n            19.171588710161302,\r\n            49.13421168069905\r\n          ],\r\n          [\r\n            19.170287928866884,\r\n            49.126678574469906\r\n          ],\r\n          [\r\n            19.16911513103787,\r\n            49.12361335194558\r\n          ],\r\n          [\r\n            19.17838005048722,\r\n            49.117718910019335\r\n          ],\r\n          [\r\n            19.19515310222411,\r\n            49.12163199622208\r\n          ],\r\n          [\r\n            19.206593497183718,\r\n            49.120400969314176\r\n          ],\r\n          [\r\n            19.21356647395271,\r\n            49.117996537682785\r\n          ],\r\n          [\r\n            19.22205650747,\r\n            49.119295077172154\r\n          ],\r\n          [\r\n            19.226424652704083,\r\n            49.118471651001215\r\n          ],\r\n          [\r\n            19.223696366755604,\r\n            49.11400591554238\r\n          ],\r\n          [\r\n            19.22533401457369,\r\n            49.11016893112921\r\n          ],\r\n          [\r\n            19.234310940395858,\r\n            49.10778083313093\r\n          ],\r\n          [\r\n            19.2412621193931,\r\n            49.104431361528384\r\n          ],\r\n          [\r\n            19.24417702577381,\r\n            49.0989215629686\r\n          ],\r\n          [\r\n            19.249230299537885,\r\n            49.09656942096666\r\n          ],\r\n          [\r\n            19.259548120678602,\r\n            49.09595635088198\r\n          ],\r\n          [\r\n            19.266689636676233,\r\n            49.09223593554006\r\n          ],\r\n          [\r\n            19.271154728238457,\r\n            49.08751225849994\r\n          ],\r\n          [\r\n            19.2751688213165,\r\n            49.08307289577738\r\n          ],\r\n          [\r\n            19.287792652580265,\r\n            49.08442552185002\r\n          ],\r\n          [\r\n            19.29581486108512,\r\n            49.08468526524723\r\n          ],\r\n          [\r\n            19.301250360715585,\r\n            49.08561346499607\r\n          ],\r\n          [\r\n            19.31728002889261,\r\n            49.0772934901336\r\n          ],\r\n          [\r\n            19.358454239852904,\r\n            49.079746925405175\r\n          ],\r\n          [\r\n            19.392638416410193,\r\n            49.088415964469476\r\n          ],\r\n          [\r\n            19.41380162367767,\r\n            49.092004811483775\r\n          ],\r\n          [\r\n            19.434873923541204,\r\n            49.0973793916302\r\n          ],\r\n          [\r\n            19.442950098588312,\r\n            49.09642024372101\r\n          ],\r\n          [\r\n            19.44678045618437,\r\n            49.09173052563344\r\n          ],\r\n          [\r\n            19.467803445906554,\r\n            49.087410299043256\r\n          ],\r\n          [\r\n            19.487150332629398,\r\n            49.09052528321308\r\n          ],\r\n          [\r\n            19.50050413790828,\r\n            49.087291369376715\r\n          ],\r\n          [\r\n            19.514042042629114,\r\n            49.09185393397223\r\n          ],\r\n          [\r\n            19.531854323968872,\r\n            49.09044016619913\r\n          ],\r\n          [\r\n            19.540833528099284,\r\n            49.087142761270314\r\n          ],\r\n          [\r\n            19.551290970291433,\r\n            49.08714066722217\r\n          ],\r\n          [\r\n            19.556977157851662,\r\n            49.08337925619216\r\n          ],\r\n          [\r\n            19.572870921689457,\r\n            49.08115640340654\r\n          ],\r\n          [\r\n            19.58409791387308,\r\n            49.08196855799454\r\n          ],\r\n          [\r\n            19.596572745499913,\r\n            49.07565571505842\r\n          ],\r\n          [\r\n            19.60594159718437,\r\n            49.073057894986505\r\n          ],\r\n          [\r\n            19.622908898690866,\r\n            49.07152076352679\r\n          ],\r\n          [\r\n            19.645055821208643,\r\n            49.065145621857255\r\n          ],\r\n          [\r\n            19.666702216203134,\r\n            49.05796333093707\r\n          ],\r\n          [\r\n            19.683189288873393,\r\n            49.05631166570228\r\n          ],\r\n          [\r\n            19.695375780122617,\r\n            49.05759381593029\r\n          ],\r\n          [\r\n            19.71624337430842,\r\n            49.05309118315978\r\n          ],\r\n          [\r\n            19.745221784513575,\r\n            49.05948970065933\r\n          ],\r\n          [\r\n            19.753310990445897,\r\n            49.05890159205063\r\n          ],\r\n          [\r\n            19.78419244128989,\r\n            49.05126469838345\r\n          ],\r\n          [\r\n            19.797203557014456,\r\n            49.052872437158925\r\n          ],\r\n          [\r\n            19.807620362331164,\r\n            49.05594658905787\r\n          ],\r\n          [\r\n            19.82398715998022,\r\n            49.05629721836246\r\n          ],\r\n          [\r\n            19.832491121899125,\r\n            49.0581793776806\r\n          ],\r\n          [\r\n            19.852431007292466,\r\n            49.0557051268226\r\n          ],\r\n          [\r\n            19.867555148565202,\r\n            49.05983138840827\r\n          ],\r\n          [\r\n            19.896996841416012,\r\n            49.07047244376335\r\n          ],\r\n          [\r\n            19.91178415817555,\r\n            49.07130448561418\r\n          ],\r\n          [\r\n            19.93823587114258,\r\n            49.065885734406436\r\n          ],\r\n          [\r\n            19.950802535050173,\r\n            49.06423814505777\r\n          ],\r\n          [\r\n            19.960542884795302,\r\n            49.06411178576627\r\n          ],\r\n          [\r\n            19.97089840887739,\r\n            49.06764366669981\r\n          ],\r\n          [\r\n            19.98223373540216,\r\n            49.07141310277942\r\n          ],\r\n          [\r\n            19.99869938719766,\r\n            49.069887533991505\r\n          ],\r\n          [\r\n            20.01011833090311,\r\n            49.070142406847964\r\n          ],\r\n          [\r\n            20.02420837748747,\r\n            49.06932967152798\r\n          ],\r\n          [\r\n            20.03837643768651,\r\n            49.069704405056285\r\n          ],\r\n          [\r\n            20.05114407674,\r\n            49.06738221195252\r\n          ],\r\n          [\r\n            20.066390018641215,\r\n            49.06537675040428\r\n          ],\r\n          [\r\n            20.081351852079223,\r\n            49.06359456152802\r\n          ],\r\n          [\r\n            20.099696308230648,\r\n            49.07097512792615\r\n          ],\r\n          [\r\n            20.115052015548827,\r\n            49.07274298180039\r\n          ],\r\n          [\r\n            20.12775146649318,\r\n            49.07035383082075\r\n          ],\r\n          [\r\n            20.142677957095856,\r\n            49.063796051352114\r\n          ],\r\n          [\r\n            20.154234943934966,\r\n            49.0644639738191\r\n          ],\r\n          [\r\n            20.165019271982345,\r\n            49.06699543803745\r\n          ],\r\n          [\r\n            20.18457132868369,\r\n            49.064432466887325\r\n          ],\r\n          [\r\n            20.19690189151234,\r\n            49.06464251566129\r\n          ],\r\n          [\r\n            20.208607974799207,\r\n            49.06309369351638\r\n          ],\r\n          [\r\n            20.234056682026022,\r\n            49.06484336801876\r\n          ],\r\n          [\r\n            20.261913157987834,\r\n            49.064944203517655\r\n          ],\r\n          [\r\n            20.270226088230913,\r\n            49.06896693582962\r\n          ],\r\n          [\r\n            20.28319614959716,\r\n            49.075949801578105\r\n          ],\r\n          [\r\n            20.296783498084125,\r\n            49.075831754333905\r\n          ],\r\n          [\r\n            20.309263571705344,\r\n            49.075946422940945\r\n          ],\r\n          [\r\n            20.319773947574618,\r\n            49.0733364616745\r\n          ],\r\n          [\r\n            20.349293191618955,\r\n            49.06862185009007\r\n          ],\r\n          [\r\n            20.358008123702916,\r\n            49.05908167562208\r\n          ],\r\n          [\r\n            20.36563510273905,\r\n            49.0515047888363\r\n          ],\r\n          [\r\n            20.382637511884468,\r\n            49.04610069077404\r\n          ],\r\n          [\r\n            20.399518605395457,\r\n            49.03949853361539\r\n          ],\r\n          [\r\n            20.411724126938026,\r\n            49.037143330800546\r\n          ],\r\n          [\r\n            20.425674057820544,\r\n            49.037021768634844\r\n          ],\r\n          [\r\n            20.431745314332602,\r\n            49.03429733717516\r\n          ],\r\n          [\r\n            20.437370458980638,\r\n            49.02834777716228\r\n          ],\r\n          [\r\n            20.4380918472973,\r\n            49.02284312022704\r\n          ],\r\n          [\r\n            20.44589712434015,\r\n            49.017432451735885\r\n          ],\r\n          [\r\n            20.466061309185903,\r\n            49.00710301806413\r\n          ],\r\n          [\r\n            20.48315158783413,\r\n            49.0029695196194\r\n          ],\r\n          [\r\n            20.512586403221775,\r\n            49.0012016903047\r\n          ],\r\n          [\r\n            20.52692064753907,\r\n            49.000191247615874\r\n          ],\r\n          [\r\n            20.543907871629017,\r\n            49.002294660152046\r\n          ],\r\n          [\r\n            20.560247886524223,\r\n            49.00001751051667\r\n          ],\r\n          [\r\n            20.574439648182675,\r\n            49.00393642590535\r\n          ],\r\n          [\r\n            20.596458415491327,\r\n            49.008586313458096\r\n          ],\r\n          [\r\n            20.61225355752697,\r\n            49.01036999013371\r\n          ],\r\n          [\r\n            20.630346345680408,\r\n            49.00693052476595\r\n          ],\r\n          [\r\n            20.64411579830582,\r\n            49.00622213765939\r\n          ],\r\n          [\r\n            20.66678879151533,\r\n            49.00966635091339\r\n          ],\r\n          [\r\n            20.695991253169865,\r\n            49.00620930022029\r\n          ],\r\n          [\r\n            20.728540261439974,\r\n            49.009073682296844\r\n          ],\r\n          [\r\n            20.763197067723553,\r\n            49.00776839248823\r\n          ],\r\n          [\r\n            20.78690269793708,\r\n            49.00623830520419\r\n          ],\r\n          [\r\n            20.80681188554081,\r\n            49.00931230241463\r\n          ],\r\n          [\r\n            20.83976679390352,\r\n            49.009784977258846\r\n          ],\r\n          [\r\n            20.85330460573988,\r\n            49.0113680622855\r\n          ],\r\n          [\r\n            20.864470045854944,\r\n            49.00976713435992\r\n          ],\r\n          [\r\n            20.886858615993845,\r\n            49.00092968056788\r\n          ],\r\n          [\r\n            20.902634097759744,\r\n            48.996296623348485\r\n          ],\r\n          [\r\n            20.922400790881625,\r\n            48.9958339012332\r\n          ],\r\n          [\r\n            20.9345711757326,\r\n            49.002514400269064\r\n          ],\r\n          [\r\n            20.944335650749082,\r\n            49.01313598830515\r\n          ],\r\n          [\r\n            20.953973295632466,\r\n            49.01558970601877\r\n          ],\r\n          [\r\n            20.96984970288841,\r\n            49.01891225177019\r\n          ],\r\n          [\r\n            20.97710322353862,\r\n            49.01930409160258\r\n          ],\r\n          [\r\n            20.988308181159482,\r\n            49.022977560740856\r\n          ],\r\n          [\r\n            20.995989556169377,\r\n            49.02727561442836\r\n          ],\r\n          [\r\n            21.01101123393579,\r\n            49.026913365117366\r\n          ],\r\n          [\r\n            21.022657929566606,\r\n            49.026668977082835\r\n          ],\r\n          [\r\n            21.03431376873155,\r\n            49.021622659582334\r\n          ],\r\n          [\r\n            21.043285313316574,\r\n            49.013100235309196\r\n          ],\r\n          [\r\n            21.0536723006646,\r\n            49.00765960120239\r\n          ],\r\n          [\r\n            21.06087846951334,\r\n            48.999179430064174\r\n          ],\r\n          [\r\n            21.06754116290773,\r\n            48.99662080316634\r\n          ],\r\n          [\r\n            21.0814545492712,\r\n            48.999649291628316\r\n          ],\r\n          [\r\n            21.106566857129906,\r\n            49.00060773213846\r\n          ],\r\n          [\r\n            21.13311767355853,\r\n            49.00853916079862\r\n          ],\r\n          [\r\n            21.162180273047568,\r\n            49.00329991711959\r\n          ],\r\n          [\r\n            21.17654116431791,\r\n            49.00271014454759\r\n          ],\r\n          [\r\n            21.194171313962187,\r\n            48.99775349637329\r\n          ],\r\n          [\r\n            21.20745743980163,\r\n            48.995162891509295\r\n          ],\r\n          [\r\n            21.213551660996018,\r\n            48.98130078181279\r\n          ],\r\n          [\r\n            21.221072374870943,\r\n            48.97444363137507\r\n          ],\r\n          [\r\n            21.245926524631443,\r\n            48.965135931317576\r\n          ],\r\n          [\r\n            21.25255713039212,\r\n            48.95268138556358\r\n          ],\r\n          [\r\n            21.26023939030273,\r\n            48.93843289408821\r\n          ],\r\n          [\r\n            21.258150459205154,\r\n            48.92540156244718\r\n          ],\r\n          [\r\n            21.250145398557947,\r\n            48.90746679782245\r\n          ],\r\n          [\r\n            21.24888972668856,\r\n            48.88903346865888\r\n          ],\r\n          [\r\n            21.254504109644245,\r\n            48.86942496628393\r\n          ],\r\n          [\r\n            21.266253184010395,\r\n            48.85848944096122\r\n          ],\r\n          [\r\n            21.28669200343097,\r\n            48.84861247700445\r\n          ],\r\n          [\r\n            21.30402997513258,\r\n            48.83639892647119\r\n          ],\r\n          [\r\n            21.311288441592183,\r\n            48.82113818878162\r\n          ],\r\n          [\r\n            21.309844848187566,\r\n            48.80694065734059\r\n          ],\r\n          [\r\n            21.313448764753247,\r\n            48.78933479111589\r\n          ],\r\n          [\r\n            21.31307988477394,\r\n            48.782852063421075\r\n          ],\r\n          [\r\n            21.3225599163585,\r\n            48.773488048985655\r\n          ],\r\n          [\r\n            21.326752230319613,\r\n            48.76436125107347\r\n          ],\r\n          [\r\n            21.333610372308158,\r\n            48.74570613799776\r\n          ],\r\n          [\r\n            21.346088705340094,\r\n            48.740566424683664\r\n          ],\r\n          [\r\n            21.363305053212997,\r\n            48.74258410329526\r\n          ],\r\n          [\r\n            21.378613745744218,\r\n            48.74150244593386\r\n          ],\r\n          [\r\n            21.392700360477875,\r\n            48.73459917330871\r\n          ],\r\n          [\r\n            21.411974727019157,\r\n            48.72917210446795\r\n          ],\r\n          [\r\n            21.424732191801667,\r\n            48.72727381726446\r\n          ],\r\n          [\r\n            21.434837215654653,\r\n            48.72429322517712\r\n          ]\r\n        ],\r\n        \"type\": \"LineString\"\r\n      }\r\n    }\r\n  ]\r\n}";


    [Fact]
    public async Task Positions_Straight_Test()
    {
        const int raceId = 1;
        var trackService = GetTrackService(raceId);

        const string driver1 = "24e124c5-68d0-4ae2-82e8-20bb58d5ba6f";
        const string driver2 = "1938eeb5-4959-4c6f-b23d-bf78c4fcc875";
        const string driver3 = "3f6417cc-928c-4f3c-97ed-c871ad591480";

        var drivers = new List<DriverDto>
            {
                new()
                {
                    Id = Guid.Parse(driver1)
                },
                new()
                {
                    Id = Guid.Parse(driver2)
                },
                new()
                {
                    Id = Guid.Parse(driver3)
                }
            };
        var raceDataDto = new RaceDataDto
        {
            Drivers = drivers,
            GeoJsonData = SpaGeoJson,
            LapCount = 1,
            RaceId = raceId
        };

        SetupRace(raceDataDto, trackService);

        var gpsData = new List<GpsData>
        {
            new()
            {
                DriverId = driver1,
                Latitude = 50.445373,
                Longitude = 5.966249
            },
            new()
            {
                DriverId = driver2,
                Latitude = 50.445921,
                Longitude = 5.964781
            },
            new()
            {
                DriverId = driver3,
                Latitude = 50.442633,
                Longitude = 5.970267
            },
        };
        await trackService.UpdateGpsData(gpsData);

        var driversOrder = trackService.GetRaceState(raceId).Item1;
        Assert.Equal(3, driversOrder.Count);
        Assert.Equal(driver3, driversOrder[0].DriverId);
        Assert.Equal(driver1, driversOrder[1].DriverId);
        Assert.Equal(driver2, driversOrder[2].DriverId);
    }

    [Fact]
    public async Task Positions_Corner_Test()
    {
        const int raceId = 2;
        var trackService = GetTrackService(raceId);

        const string driver1 = "24e124c5-68d0-4ae2-82e8-20bb58d5ba6f";
        const string driver2 = "1938eeb5-4959-4c6f-b23d-bf78c4fcc875";
        const string driver3 = "3f6417cc-928c-4f3c-97ed-c871ad591480";

        var drivers = new List<DriverDto>
        {
            new()
            {
                Id = Guid.Parse(driver1)
            },
            new()
            {
                Id = Guid.Parse(driver2)
            },
            new()
            {
                Id = Guid.Parse(driver3)
            }
        };
        var raceDataDto = new RaceDataDto
        {
            Drivers = drivers,
            GeoJsonData = SpaGeoJson,
            LapCount = 1,
            RaceId = raceId
        };

        SetupRace(raceDataDto, trackService);
        
        var gpsData = new List<GpsData>
        {
            new()
            {
                DriverId = driver1,
                Latitude = 50.446157,
                Longitude = 5.963305
            },
            new()
            {
                DriverId = driver2,
                Latitude = 50.446265,
                Longitude = 5.963370
            },
            new()
            {
                DriverId = driver3,
                Latitude = 50.446295,
                Longitude = 5.963594
            },
        };
        await trackService.UpdateGpsData(gpsData);

        var driversOrder = trackService.GetRaceState(raceId).Item1;
        Assert.Equal(3, driversOrder.Count);
        Assert.Equal(driver3, driversOrder[0].DriverId);
        Assert.Equal(driver2, driversOrder[1].DriverId);
        Assert.Equal(driver1, driversOrder[2].DriverId);
    }

    [Fact]
    public async Task FinishLineCross_Test()
    {
        const int raceId = 3;
        var trackService = GetTrackService(raceId);

        const string driver1 = "24e124c5-68d0-4ae2-82e8-20bb58d5ba6f";
        const string driver2 = "1938eeb5-4959-4c6f-b23d-bf78c4fcc875";
        const string driver3 = "3f6417cc-928c-4f3c-97ed-c871ad591480";

        var drivers = new List<DriverDto>
        {
            new()
            {
                Id = Guid.Parse(driver1)
            },
            new()
            {
                Id = Guid.Parse(driver2)
            },
            new()
            {
                Id = Guid.Parse(driver3)
            }
        };
        var raceDataDto = new RaceDataDto
        {
            Drivers = drivers,
            GeoJsonData = SpaGeoJson,
            LapCount = 1,
            RaceId = raceId
        };

        SetupRace(raceDataDto, trackService);

        var gpsData = new List<GpsData>
        {
            new()
            {
                DriverId = driver1,
                Latitude = 50.441597,
                Longitude = 5.967220
            },
            new()
            {
                DriverId = driver2,
                Latitude = 50.442137,
                Longitude = 5.966873
            },
            new()
            {
                DriverId = driver3,
                Latitude = 50.441839,
                Longitude = 5.967155
            },
        };
        await trackService.UpdateGpsData(gpsData);

        var (driversOrder, lapCount) = trackService.GetRaceState(raceId);
        Assert.Equal(3, driversOrder.Count);
        Assert.Equal(0, lapCount);
        Assert.Equal(driver2, driversOrder[0].DriverId);
        Assert.Equal(driver3, driversOrder[1].DriverId);
        Assert.Equal(driver1, driversOrder[2].DriverId);

        gpsData = new List<GpsData>
        {
            new()
            {
                DriverId = driver1,
                Latitude = 50.441896,
                Longitude = 5.967133
            },
            new()
            {
                DriverId = driver2,
                Latitude = 50.445191,
                Longitude = 5.964157
            },
            new()
            {
                DriverId = driver3,
                Latitude = 50.443924,
                Longitude = 5.965277
            },
        };
        await trackService.UpdateGpsData(gpsData);

        (driversOrder, lapCount) = trackService.GetRaceState(raceId);
        Assert.Equal(3, driversOrder.Count);
        Assert.Equal(1, lapCount);
        Assert.Equal(driver2, driversOrder[0].DriverId);
        Assert.Equal(driver3, driversOrder[1].DriverId);
        Assert.Equal(driver1, driversOrder[2].DriverId);
    }

    [Fact]
    public async Task Overtake_Test()
    {
        const int raceId = 4;
        var trackService = GetTrackService(raceId);

        const string driver1 = "24e124c5-68d0-4ae2-82e8-20bb58d5ba6f";
        const string driver2 = "1938eeb5-4959-4c6f-b23d-bf78c4fcc875";
        const string driver3 = "3f6417cc-928c-4f3c-97ed-c871ad591480";

        var drivers = new List<DriverDto>
        {
            new()
            {
                Id = Guid.Parse(driver1)
            },
            new()
            {
                Id = Guid.Parse(driver2)
            },
            new()
            {
                Id = Guid.Parse(driver3)
            }
        };
        var raceDataDto = new RaceDataDto
        {
            Drivers = drivers,
            GeoJsonData = SpaGeoJson,
            LapCount = 1,
            RaceId = raceId
        };

        SetupRace(raceDataDto, trackService);

        var gpsData = new List<GpsData>
        {
            new()
            {
                DriverId = driver1,
                Latitude = 50.441597,
                Longitude = 5.967220
            },
            new()
            {
                DriverId = driver2,
                Latitude = 50.442137,
                Longitude = 5.966873
            },
            new()
            {
                DriverId = driver3,
                Latitude = 50.441839,
                Longitude = 5.967155
            },
        };
        await trackService.UpdateGpsData(gpsData);

        var driversOrder = trackService.GetRaceState(raceId).Item1;
        Assert.Equal(3, driversOrder.Count);
        Assert.Equal(driver2, driversOrder[0].DriverId);
        Assert.Equal(driver3, driversOrder[1].DriverId);
        Assert.Equal(driver1, driversOrder[2].DriverId);

        gpsData = new List<GpsData>
        {
            new()
            {
                DriverId = driver1,
                Latitude = 50.443924,
                Longitude = 5.965277
            },
            new()
            {
                DriverId = driver2,
                Latitude = 50.445191,
                Longitude = 5.964157
            },
            new()
            {
                DriverId = driver3,
                Latitude = 50.441896,
                Longitude = 5.967133
            },
        };
        await trackService.UpdateGpsData(gpsData);

        driversOrder = trackService.GetRaceState(raceId).Item1;
        Assert.Equal(3, driversOrder.Count);
        Assert.Equal(driver2, driversOrder[0].DriverId);
        Assert.Equal(driver1, driversOrder[1].DriverId);
        Assert.Equal(driver3, driversOrder[2].DriverId);
    }

    [Fact]
    public async Task FixedPositionAfterFinish_Test()
    {
        const int raceId = 5;
        var trackService = GetTrackService(raceId);

        const string driver1 = "24e124c5-68d0-4ae2-82e8-20bb58d5ba6f";
        const string driver2 = "1938eeb5-4959-4c6f-b23d-bf78c4fcc875";
        const string driver3 = "3f6417cc-928c-4f3c-97ed-c871ad591480";

        var drivers = new List<DriverDto>
        {
            new()
            {
                Id = Guid.Parse(driver1)
            },
            new()
            {
                Id = Guid.Parse(driver2)
            },
            new()
            {
                Id = Guid.Parse(driver3)
            }
        };
        var raceDataDto = new RaceDataDto
        {
            Drivers = drivers,
            GeoJsonData = BaKeGeoJson,
            LapCount = 0,
            RaceId = raceId
        };

        SetupRace(raceDataDto, trackService);

        var gpsData = new List<GpsData>
        {
            new()
            {
                DriverId = driver1,
                Latitude = 48.72550175322502,
                Longitude = 21.430691044375067
            },
            new()
            {
                DriverId = driver2,
                Latitude = 48.727272472806646,
                Longitude = 21.4247779142068
            },
            new()
            {
                DriverId = driver3,
                Latitude = 48.72827292198892,
                Longitude = 21.41804876698268
            },
        };
        await trackService.UpdateGpsData(gpsData);

        var driversOrder = trackService.GetRaceState(raceId).Item1;
        Assert.Equal(3, driversOrder.Count);
        Assert.Equal(driver1, driversOrder[0].DriverId);
        Assert.Equal(driver2, driversOrder[1].DriverId);
        Assert.Equal(driver3, driversOrder[2].DriverId);

        gpsData = new List<GpsData>
        {
            new()
            {
                DriverId = driver1,
                Latitude = 48.72363009625988,
                Longitude = 21.43633928658386
            },
            new()
            {
                DriverId = driver2,
                Latitude = 48.72411322042146,
                Longitude = 21.43545747518732
            },
            new()
            {
                DriverId = driver3,
                Latitude = 48.724586480406856,
                Longitude = 21.433798474085535
            },
        };
        await trackService.UpdateGpsData(gpsData);

        driversOrder = trackService.GetRaceState(raceId).Item1;
        Assert.Equal(3, driversOrder.Count);
        Assert.Equal(driver1, driversOrder[0].DriverId);
        Assert.Equal(driver2, driversOrder[1].DriverId);
        Assert.Equal(driver3, driversOrder[2].DriverId);

        gpsData = new List<GpsData>
        {
            new()
            {
                DriverId = driver1,
                Latitude = 48.7235709378802,
                Longitude = 21.436563475921787
            },
            new()
            {
                DriverId = driver2,
                Latitude = 48.72358079761452,
                Longitude = 21.43847655827355
            },
            new()
            {
                DriverId = driver3,
                Latitude = 48.722486355255825,
                Longitude = 21.43728088180373
            },
        };
        await trackService.UpdateGpsData(gpsData);

        driversOrder = trackService.GetRaceState(raceId).Item1;
        Assert.Equal(3, driversOrder.Count);
        Assert.Equal(driver1, driversOrder[0].DriverId);
        Assert.Equal(driver2, driversOrder[1].DriverId);
        Assert.Equal(driver3, driversOrder[2].DriverId);
    }

    private static ITrackService GetTrackService(int raceId)
    {
        var mockClients = new Mock<IClientProxy>();
        var raceHubContextMock = new Mock<IHubContext<RaceHub>>();
        raceHubContextMock.Setup(x => x.Clients.Group(It.IsAny<string>())).Returns(mockClients.Object);

        var httpContext = new DefaultHttpContext
        {
            User = new ClaimsPrincipal(new ClaimsIdentity(new Claim[]
            {
                new(ClaimTypes.NameIdentifier, raceId.ToString())
            }))
        };

        var httpContextAccessorMock = new Mock<IHttpContextAccessor>();
        httpContextAccessorMock.Setup(x => x.HttpContext).Returns(httpContext);
        var token = GenerateToken(raceId);
        httpContextAccessorMock.SetupGet(x => x.HttpContext)
            .Returns(new DefaultHttpContext());
        httpContextAccessorMock.Setup(x => x.HttpContext!.Request.Headers["Authorization"])
            .Returns("Bearer " + token);

        var repositoryMock = new Mock<IRepository>();
        repositoryMock.Setup(x => x.SaveData(It.IsAny<int>(), It.IsAny<string>())).Returns(Task.CompletedTask);

        return new TrackService(raceHubContextMock.Object, httpContextAccessorMock.Object, repositoryMock.Object);
    }

    private static void SetupRace(RaceDataDto raceData, ITrackService trackService)
    {
        trackService.LoadRaceData(raceData);
    }

    private static string GenerateToken(int raceId)
    {
        var securityKey = new SymmetricSecurityKey(Convert.FromBase64String("vLtnueJZ9GYey0gWtx/oERe4eSLW3ujbuVYzFpHiUxo="));
        var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

        var claims = new[]
        {
            new Claim(ClaimTypes.NameIdentifier, raceId.ToString()),
            new Claim(ClaimTypes.Name, "User"),
            new Claim(ClaimTypes.UserData, "1"),
        };

        var token = new JwtSecurityToken(
            issuer: "issuer",
            audience: "audience",
            claims: claims,
            notBefore: DateTime.Now,
            expires: DateTime.Now.AddDays(1),
            signingCredentials: credentials
        );

        var tokenHandler = new JwtSecurityTokenHandler();
        return tokenHandler.WriteToken(token);
    }
}